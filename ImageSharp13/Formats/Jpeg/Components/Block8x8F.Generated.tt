// <copyright file="Block8x8F.cs" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>
// ReSharper disable InconsistentNaming
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated />
#pragma warning disable
<#
char[] coordz = {'X', 'Y', 'Z', 'W'};
#>
namespace ImageSharp.Formats.Jpg
{
    using System.Numerics;
    using System.Runtime.CompilerServices;

    internal partial struct Block8x8F
    {
        private static readonly Vector4 CMin4 = new Vector4(0F);
        private static readonly Vector4 CMax4 = new Vector4(255F);
        private static readonly Vector4 COff4 = new Vector4(128F);

        /// <summary>
        /// Transpose the block into the destination block.
        /// </summary>
        /// <param name="d">The destination block</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void TransposeInto(ref Block8x8F d)
        {
            <#
            PushIndent("            ");

            for (int i = 0; i < 8; i++)
            {
                char destCoord = coordz[i % 4];
                char destSide = (i / 4) % 2 == 0 ? 'L' : 'R';

                for (int j = 0; j < 8; j++)
                {
                    if(i > 0 && j == 0){
                    WriteLine("");
                    }

                    char srcCoord = coordz[j % 4];
                    char srcSide = (j / 4) % 2 == 0 ? 'L' : 'R';

                    string expression = $"d.V{j}{destSide}.{destCoord} = V{i}{srcSide}.{srcCoord};\r\n";
                    Write(expression);
                }
            }
            PopIndent();
            #>
        }

        /// <summary>
        /// Level shift by +128, clip to [0, 255]
        /// </summary>
        /// <param name="d">The destination block</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void TransformByteConvetibleColorValuesInto(ref Block8x8F d)
        {
            <#

            PushIndent("            ");

            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 2; j++)
                {
                    char side = j == 0 ? 'L' : 'R';
                    Write($"d.V{i}{side} = Vector4.Clamp(V{i}{side} + COff4, CMin4, CMax4);\r\n");
                }
            }
            PopIndent();
            #>
        }
    }
}
