// <autogenerated />
// <copyright file="PorterDuffFunctions.Generated.cs" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>

namespace ImageSharp.PixelFormats.PixelBlenders
{
    using System;
    using System.Numerics;
    using ImageSharp.Memory;


    /// <summary>
    /// Collection of Porter Duff alpha blending functions applying different composition models.
    /// </summary>
    /// <remarks>
    /// These functions are designed to be a general solution for all color cases,
    /// that is, they take in account the alpha value of both the backdrop
    /// and source, and there's no need to alpha-premultiply neither the backdrop
    /// nor the source.
    /// Note there are faster functions for when the backdrop color is known
    /// to be opaque
    /// </remarks>
    internal static class DefaultPixelBlenders<TPixel>
        where TPixel : struct, IPixel<TPixel>
    {

            internal class Normal : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Normal Instance { get; } = new Normal();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Normal(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Normal(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Multiply : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Multiply Instance { get; } = new Multiply();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Multiply(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Multiply(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Add : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Add Instance { get; } = new Add();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Add(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Add(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Substract : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Substract Instance { get; } = new Substract();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Substract(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Substract(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Screen : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Screen Instance { get; } = new Screen();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Screen(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Screen(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Darken : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Darken Instance { get; } = new Darken();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Darken(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Darken(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Lighten : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Lighten Instance { get; } = new Lighten();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Lighten(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Lighten(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Overlay : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Overlay Instance { get; } = new Overlay();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Overlay(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Overlay(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class HardLight : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static HardLight Instance { get; } = new HardLight();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.HardLight(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.HardLight(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Src : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Src Instance { get; } = new Src();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Src(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Src(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Atop : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Atop Instance { get; } = new Atop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Atop(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Atop(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Over : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Over Instance { get; } = new Over();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Over(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Over(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class In : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static In Instance { get; } = new In();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.In(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.In(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Out : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Out Instance { get; } = new Out();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Out(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Out(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Dest : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Dest Instance { get; } = new Dest();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Dest(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Dest(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class DestAtop : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DestAtop Instance { get; } = new DestAtop();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.DestAtop(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.DestAtop(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class DestOver : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DestOver Instance { get; } = new DestOver();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.DestOver(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.DestOver(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class DestIn : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DestIn Instance { get; } = new DestIn();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.DestIn(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.DestIn(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class DestOut : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static DestOut Instance { get; } = new DestOut();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.DestOut(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.DestOut(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Clear : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Clear Instance { get; } = new Clear();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Clear(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Clear(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
            internal class Xor : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static Xor Instance { get; } = new Xor();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.Xor(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.Xor(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
    }
}