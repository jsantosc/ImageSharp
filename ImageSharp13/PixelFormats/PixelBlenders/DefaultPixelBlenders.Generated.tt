<#
// <copyright file="DefaultPixelBlenders.Generated.tt" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <autogenerated />
// <copyright file="PorterDuffFunctions.Generated.cs" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>

namespace ImageSharp.PixelFormats.PixelBlenders
{
    using System;
    using System.Numerics;
    using ImageSharp.Memory;


    /// <summary>
    /// Collection of Porter Duff alpha blending functions applying different composition models.
    /// </summary>
    /// <remarks>
    /// These functions are designed to be a general solution for all color cases,
    /// that is, they take in account the alpha value of both the backdrop
    /// and source, and there's no need to alpha-premultiply neither the backdrop
    /// nor the source.
    /// Note there are faster functions for when the backdrop color is known
    /// to be opaque
    /// </remarks>
    internal static class DefaultPixelBlenders<TPixel>
        where TPixel : struct, IPixel<TPixel>
    {

<#
        


    string[] blenders = new []{ 
        "Normal",
        "Multiply",
        "Add",
        "Substract",
        "Screen",
        "Darken",
        "Lighten",
        "Overlay",
        "HardLight",
        "Src"      ,
        "Atop"     ,
        "Over"     ,
        "In"       ,
        "Out"      ,
        "Dest"     ,
        "DestAtop" ,
        "DestOver" ,
        "DestIn"   ,
        "DestOut"  ,
        "Clear"    ,
        "Xor"      ,
    };

 

        foreach(var blender in blenders) {
#>
            internal class <#=blender#> : PixelBlender<TPixel>
            {
                
                /// <summary>
                /// Gets the static instance of this blender.
                /// </summary>
                public static <#=blender#> Instance { get; } = new <#=blender#>();

                /// <inheritdoc />
                public override TPixel Blend(TPixel background, TPixel source, float amount)
                {
                    return PorterDuffFunctions.<#=blender#>(background, source, amount);
                }

                /// <inheritdoc />
                public override void Blend(Span<TPixel> destination, Span<TPixel> background, Span<TPixel> source, Span<float> amount)
                {
                    Guard.MustBeGreaterThanOrEqualTo(background.Length, destination.Length, nameof(background.Length));
                    Guard.MustBeGreaterThanOrEqualTo(source.Length, destination.Length, nameof(source.Length));
                    Guard.MustBeGreaterThanOrEqualTo(amount.Length, destination.Length, nameof(amount.Length));

                    using (Buffer<Vector4> buffer = new Buffer<Vector4>(destination.Length * 3))
                    {
                        Span<Vector4> destinationSpan = buffer.Slice(0, destination.Length);
                        Span<Vector4> backgroundSpan = buffer.Slice(destination.Length, destination.Length);
                        Span<Vector4> sourceSpan = buffer.Slice(destination.Length * 2, destination.Length);

                        PixelOperations<TPixel>.Instance.ToVector4(background, backgroundSpan, destination.Length);
                        PixelOperations<TPixel>.Instance.ToVector4(source, sourceSpan, destination.Length);

                        for (int i = 0; i < destination.Length; i++)
                        {
                            destinationSpan[i] = PorterDuffFunctions.<#=blender#>(backgroundSpan[i], sourceSpan[i], amount[i]);
                        }

                        PixelOperations<TPixel>.Instance.PackFromVector4(destinationSpan, destination, destination.Length);
                    }
                }
            }
<#

    }

#>
    }
}