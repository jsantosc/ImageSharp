<#
// <copyright file="PorterDuffFunctions.Generated.tt" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <autogenerated />
// <copyright file="PorterDuffFunctions.Generated.cs" company="James Jackson-South">
// Copyright (c) James Jackson-South and contributors.
// Licensed under the Apache License, Version 2.0.
// </copyright>

namespace ImageSharp.PixelFormats.PixelBlenders
{
    using System.Numerics;
    using System.Runtime.CompilerServices;


    internal static partial class PorterDuffFunctions
    {
<#
    
    void GeneratePixelBlender (string blender)
    {
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TPixel <#=blender#><TPixel>(TPixel backdrop, TPixel source, float amount)
            where TPixel : struct, IPixel<TPixel>
        {
            TPixel dest = default(TPixel);
            dest.PackFromVector4(<#=blender#>(backdrop.ToVector4(), source.ToVector4(), amount));
            return dest;
        }

<#
    }

    void GenerateVectorCompositor(string name, string sourceVar, string destVar, string blendVar)
    {
#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Vector4 <#=name#>(Vector4 backdrop, Vector4 source, float opacity)
        {
            opacity = opacity.Clamp(0, 1);
<# if(sourceVar != "Vector4.Zero" ) { #>
            source.W *= opacity;            
<# } #>
            Vector4 xform = <#=blendVar#>;

            // calculate weights
            float xw = <#=destVar#>.W * <#=sourceVar#>.W;
            float bw = <#=destVar#>.W - xw;
            float sw = <#=sourceVar#>.W - xw;

            // calculate final alpha
            float a = xw + bw + sw;

            // calculate final value
            xform = ((xform * xw) + (<#=destVar#> * bw) + (<#=sourceVar#> * sw)) / MathF.Max(a, Constants.Epsilon);

            return Vector4.Lerp(backdrop, xform, opacity);
        }

<#
    }
        GenerateVectorCompositor("Src",      "source",       "Vector4.Zero", "source");
        GenerateVectorCompositor("Atop",     "Vector4.Zero", "backdrop",     "source");
        GenerateVectorCompositor("Over",     "source",       "backdrop",     "source");
        GenerateVectorCompositor("In",       "Vector4.Zero", "Vector4.Zero", "source");
        GenerateVectorCompositor("Out",      "source",       "Vector4.Zero", "Vector4.Zero");
        GenerateVectorCompositor("Dest",     "Vector4.Zero", "backdrop",     "backdrop");
        GenerateVectorCompositor("DestAtop", "source",       "Vector4.Zero", "backdrop");
        GenerateVectorCompositor("DestOver", "source",       "backdrop",     "backdrop");
        GenerateVectorCompositor("DestIn",   "Vector4.Zero", "Vector4.Zero", "backdrop");
        GenerateVectorCompositor("DestOut",  "Vector4.Zero", "backdrop",     "Vector4.Zero");
        GenerateVectorCompositor("Clear",    "Vector4.Zero", "Vector4.Zero", "Vector4.Zero");
        GenerateVectorCompositor("Xor",      "source",       "backdrop",     "Vector4.Zero");

        
        GeneratePixelBlender("Normal");
        GeneratePixelBlender("Multiply");
        GeneratePixelBlender("Add");
        GeneratePixelBlender("Substract");
        GeneratePixelBlender("Screen");
        GeneratePixelBlender("Darken");
        GeneratePixelBlender("Lighten");
        GeneratePixelBlender("Overlay");
        GeneratePixelBlender("HardLight");
                             
        GeneratePixelBlender("Src");
        GeneratePixelBlender("Atop");
        GeneratePixelBlender("Over");
        GeneratePixelBlender("In");
        GeneratePixelBlender("Out");
        GeneratePixelBlender("Dest");
        GeneratePixelBlender("DestAtop");
        GeneratePixelBlender("DestOver");
        GeneratePixelBlender("DestIn");
        GeneratePixelBlender("DestOut");
        GeneratePixelBlender("Clear");
        GeneratePixelBlender("Xor");


#>
    }
}